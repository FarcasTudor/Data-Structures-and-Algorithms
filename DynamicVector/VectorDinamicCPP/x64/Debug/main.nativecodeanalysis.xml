<?xml version="1.0" encoding="UTF-8"?>
<DEFECTS>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>70</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$VectorDinamic@VPet@@@@QEAA@AEBV0@@Z</DECORATED>
    <FUNCLINE>68</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>68</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26432</DEFECTCODE>
    <DESCRIPTION>If you define or delete any default operation in the type 'class VectorDinamic&lt;class Pet&gt;', define or delete them all (c.21).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$VectorDinamic@VPet@@@@QEAA@AEBV0@@Z</DECORATED>
    <FUNCLINE>68</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>62</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$VectorDinamic@VPet@@@@QEAA@XZ</DECORATED>
    <FUNCLINE>60</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>60</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26455</DEFECTCODE>
    <DESCRIPTION>Default constructor should not throw. Declare it 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::{ctor}</FUNCTION>
    <DECORATED>??0?$VectorDinamic@VPet@@@@QEAA@XZ</DECORATED>
    <FUNCLINE>60</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>86</LINE>
      <COLUMN>18</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::=</FUNCTION>
    <DECORATED>??4?$VectorDinamic@VPet@@@@QEAAAEAV0@AEBV0@@Z</DECORATED>
    <FUNCLINE>80</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>113</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::get</FUNCTION>
    <DECORATED>?get@?$VectorDinamic@VPet@@@@QEAAAEAVPet@@H@Z</DECORATED>
    <FUNCLINE>111</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>111</LINE>
      <COLUMN>21</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'VectorDinamic&lt;Pet&gt;::get' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::get</FUNCTION>
    <DECORATED>?get@?$VectorDinamic@VPet@@@@QEAAAEAVPet@@H@Z</DECORATED>
    <FUNCLINE>111</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>123</LINE>
      <COLUMN>22</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'VectorDinamic&lt;Pet&gt;::size' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::size</FUNCTION>
    <DECORATED>?size@?$VectorDinamic@VPet@@@@QEAAHXZ</DECORATED>
    <FUNCLINE>123</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>162</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'VectorDinamic&lt;Pet&gt;::begin' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::begin</FUNCTION>
    <DECORATED>?begin@?$VectorDinamic@VPet@@@@QEAA?AV?$IteratorVectorTudor@VPet@@@@XZ</DECORATED>
    <FUNCLINE>162</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>168</LINE>
      <COLUMN>41</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'VectorDinamic&lt;Pet&gt;::end' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::end</FUNCTION>
    <DECORATED>?end@?$VectorDinamic@VPet@@@@QEAA?AV?$IteratorVectorTudor@VPet@@@@XZ</DECORATED>
    <FUNCLINE>168</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>199</LINE>
      <COLUMN>12</COLUMN>
    </SFA>
    <DEFECTCODE>26447</DEFECTCODE>
    <DESCRIPTION>The function is declared 'noexcept' but calls function 'element()' which may throw exceptions (f.6).</DESCRIPTION>
    <FUNCTION>IteratorVectorTudor&lt;Pet&gt;::*</FUNCTION>
    <DECORATED>??D?$IteratorVectorTudor@VPet@@@@QEAAAEAVPet@@XZ</DECORATED>
    <FUNCLINE>197</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>203</LINE>
      <COLUMN>48</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'IteratorVectorTudor&lt;Pet&gt;::operator++' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>IteratorVectorTudor&lt;Pet&gt;::++</FUNCTION>
    <DECORATED>??E?$IteratorVectorTudor@VPet@@@@QEAAAEAV0@XZ</DECORATED>
    <FUNCLINE>203</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>50</LINE>
      <COLUMN>5</COLUMN>
    </SFA>
    <DEFECTCODE>26496</DEFECTCODE>
    <DESCRIPTION>The variable 'newCapacity' does not change after construction, mark it as const (con.4).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::redim</FUNCTION>
    <DECORATED>?redim@?$VectorDinamic@VPet@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>51</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26409</DEFECTCODE>
    <DESCRIPTION>Avoid calling new and delete explicitly, use std::make_unique&lt;T&gt; instead (r.11).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::redim</FUNCTION>
    <DECORATED>?redim@?$VectorDinamic@VPet@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>51</LINE>
      <COLUMN>15</COLUMN>
    </SFA>
    <DEFECTCODE>26400</DEFECTCODE>
    <DESCRIPTION>Do not assign the result of an allocation or a function call with an owner&lt;T&gt; return value to a raw pointer, use owner&lt;T&gt; instead (i.11).</DESCRIPTION>
    <FUNCTION>VectorDinamic&lt;Pet&gt;::redim</FUNCTION>
    <DECORATED>?redim@?$VectorDinamic@VPet@@@@AEAAXXZ</DECORATED>
    <FUNCLINE>48</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>187</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26481</DEFECTCODE>
    <DESCRIPTION>Don't use pointer arithmetic. Use span instead (bounds.1).</DESCRIPTION>
    <FUNCTION>IteratorVectorTudor&lt;Pet&gt;::element</FUNCTION>
    <DECORATED>?element@?$IteratorVectorTudor@VPet@@@@QEBAAEAVPet@@XZ</DECORATED>
    <FUNCLINE>185</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
  <DEFECT>
    <SFA>
      <FILEPATH>C:\Users\Tudor\source\repos\VectorDinamicCPP\VectorDinamicCPP\</FILEPATH>
      <FILENAME>VectDinSmartPointer.h</FILENAME>
      <LINE>185</LINE>
      <COLUMN>27</COLUMN>
    </SFA>
    <DEFECTCODE>26440</DEFECTCODE>
    <DESCRIPTION>Function 'IteratorVectorTudor&lt;Pet&gt;::element' can be declared 'noexcept' (f.6).</DESCRIPTION>
    <FUNCTION>IteratorVectorTudor&lt;Pet&gt;::element</FUNCTION>
    <DECORATED>?element@?$IteratorVectorTudor@VPet@@@@QEBAAEAVPet@@XZ</DECORATED>
    <FUNCLINE>185</FUNCLINE>
    <PATH></PATH>
  </DEFECT>
</DEFECTS>